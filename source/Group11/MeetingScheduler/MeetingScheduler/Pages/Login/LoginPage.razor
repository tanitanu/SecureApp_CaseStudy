@layout LoginLayout
@page "/"
@using MeetingScheduler.Data;
@using MeetingScheduler.Entities;
@using Utilities;
@using Serilog;
@inject ILocalStorage LocalStorage
@inject NavigationManager NavigationManager
@inject ILoginService Login
@inject IUserRegisterService UserRegister
@inject IRoleService Role


<div class="container mt-5 body">
    <div class="row justify-content-center">
        <div class="col-md-6">
                <EditForm Model="@login">
                    <DataAnnotationsValidator />
                    <div class="form-box">
                        <div class="header-text">
                            Meeting Scheduler
                        </div>
                        <input placeholder="Your Email Address" type="text" class="form-control" id="loginEmail" autocomplete="off" @bind="login.EmailId" />
                        <ValidationMessage For="@(() => login.EmailId)" />
                        <input placeholder="Your Password" type="password" class="form-control" id="loginPassword" @bind="login.Password" />
                        <ValidationMessage For="@(() => login.Password)" />
                        <button type="submit" class="btn btn-primary btn-block loginbtn" @onclick="CheckCredential">Login</button>

                        <div class="mt-3 text-center">
                            <button type="button" class="btn btn-link" @onclick="RedirectToFor">Forgot Password?</button>
                            <button type="button" class="btn btn-link" data-toggle="modal" data-target=".bd-example-modal-lg">Sign Up</button>
                        </div>
                        <div class="mt-3 text-center text-danger">
                        <span>@LoginMesssage</span>
                        </div>
                    </div>
                </EditForm>
        </div>

    </div>
</div>


<div class="modal fade bd-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header modelHeader">
                <h5 class="modal-title">Registration Form</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <CascadingValue Value="this.userRegister">
                <EditForm Model="@userRegister">
                    <DataAnnotationsValidator />
                    <div class="modal-body">
                        <form>
                            <div class="form-group">
                                <label for="FirstName">First Name</label>
                                <input type="text" class="form-control" autocomplete="off" placeholder="Enter FirstName" @bind-value="userRegister.FirstName">
                                <ValidationMessage For="@(() => userRegister.FirstName)" />
                            </div>
                            <div class="form-group">
                                <label for="LastName">Last Name</label>
                                <input type="text" class="form-control" autocomplete="off" placeholder="Enter LastName" @bind-value="userRegister.LastName">
                                <ValidationMessage For="@(()=>userRegister.LastName)" />
                            </div>
                            <div class="form-group">
                                <label for="exampleInputEmail1">Email address</label>
                                <input type="email" class="form-control" autocomplete="off" aria-describedby="emailHelp" placeholder="Enter email" @bind-value="userRegister.Email">
                                <ValidationMessage For="@(()=>userRegister.Email)" />
                            </div>
                            <div class="form-group">
                                <label for="exampleInputPassword1">Password</label>
                                <input type="password" class="form-control" placeholder="Password" @bind-value="userRegister.Password">
                                <ValidationMessage For="@(()=>userRegister.Password)" />
                            </div>
                            <div class="form-group">
                                <label for="exampleInputPassword1">Confirm Password</label>
                                <input type="password" class="form-control" placeholder="Password" @bind-value="userRegister.ConfirmPassword">
                                <ValidationMessage For="@(()=>userRegister.ConfirmPassword)" />
                            </div>
                        </form>
                    </div>
                    @if (!registrationError)
                    {
                        <div class="col-12 row" style="text-align:left; font-weight:bold;color:red">
                            <span class="col-12">@addUserMesssage</span>
                        </div>
                    }
                    else
                    {
                        <div class="col-12 row" style="text-align:left; font-weight:bold;color:green">
                            <span class="col-12">@addUserMesssage</span>
                        </div>
                    }
                    <br />
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary" @onclick="AddUser">Register</button>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    </div>
                </EditForm>
            </CascadingValue>
        </div>
    </div>
</div>

@code {
    private UserRegister userRegister;
    public string addUserMesssage { get; set; }
    private bool registrationError = false;

    private UserLogin login;
    public string? LoginMesssage { get; set; }


    private bool loggedIn;
    private string? user;

    #region Constant Messages
    private const string ADD_USER_ERROR_MSG = "Please fill the required missing fields.";
    private const string LOGIN_ERR_MSG = "Invalid username or password";
    #endregion

    /// <summary>
    /// Get user name
    /// </summary>
    /// <returns></returns>
    public string? GetUserName()
    {
        return loggedIn ? user : null;
    }

    /// <summary>
    /// On Register button click event
    /// </summary>
    private void AddUser()
    {
        try
        {
            var response = UserRegister.UserRegisterDetails(userRegister);
            if (response.IsSuccess)
            {
                addUserMesssage = "User " + userRegister.FirstName + " " + userRegister.LastName + " registered Successfully!!!";
                registrationError = true;
            }
            else
            {
                addUserMesssage = response.Message;
            }
        }
        catch (Exception e)
        {
            addUserMesssage = ADD_USER_ERROR_MSG;
        }
    }

    /// <summary>
    /// Check user credential
    /// </summary>
    private void CheckCredential()
    {
        try
        {
            var loginDetails = Login.GetLoginDetails(login);
            if (loginDetails.IsSuccess)
            {
                NavigationManager.NavigateTo("/DashBoard");
                loggedIn = true;
                LocalStorage.SaveStringAsync("user", login.EmailId);
                LocalStorage.SaveStringAsync("username", loginDetails.UserName);
                LocalStorage.SaveStringAsync("userId", Convert.ToString(loginDetails.UserId));

                var _role = Role.GetRole(login);
                LocalStorage.SaveStringAsync("rolename", _role.RoleName);
            }
            else
            {
                LoginMesssage = loginDetails.Message;
            }
        }
        catch (Exception ex)
        {
            LoginMesssage = LOGIN_ERR_MSG;
        }
    }

    /// <summary>
    /// Redirect to forget password page
    /// </summary>
    private void RedirectToFor()
    {

        NavigationManager.NavigateTo("/forgetPassword");
    }

    //// <summary>
    /// On Initialized Async method
    /// </summary>
    /// <returns></returns>
    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        login = new UserLogin();
        userRegister = new UserRegister();
    }
}